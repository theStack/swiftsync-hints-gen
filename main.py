#!/usr/bin/env python3
"""Tool to create a binary-encoded hints file for the "IBD-Booster" proposal.

The resulting data is a bit-vector of all transaction outputs ever created
up to block number N, where each bit indicates the answer to the question
"Is this transaction output part of the UTXO set at block height N?".

The input UTXO set database for a certain snapshot at height N
can be generated by Bitcoin Core with the following commands:
$ ./build/bin/bitcoin-cli -rpcclienttimeout=0 -named dumptxoutset $PWD/utxos.dat rollback=N
$ ./contrib/utxo-tools/utxo_to_sqlite.py utxos.dat utxos.sqlite3
$ sqlite3 utxos.sqlite3 "CREATE INDEX idx_height ON utxos (height)"
"""
import argparse
from pathlib import Path
import sqlite3
import sys

import pbk


def main():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('utxos_sqlite_db', help='path to UTXO dump in SQLite3 format (should contain a block height index for fast processing)')
    parser.add_argument('node_datadir', help='path to bitcoin data directory (must be from a non-pruned node)')
    parser.add_argument('-v', '--verbose', action='store_true', help='show more detailed conversion stats on each block')
    args = parser.parse_args()

    # TODO: validate input
    #log = pbk.LoggingConnection()

    # open utxo set, determine snapshot height
    con = sqlite3.connect(args.utxos_sqlite_db)
    cur = con.cursor()
    cur.execute("SELECT max(height) from utxos")
    snapshot_height = cur.fetchone()[0]
    print(f"UTXO snapshot is at block height {snapshot_height}.")

    # TODO: make node_datadir arg optional and set it to this if none is set:
    #datadir = Path.home() / ".bitcoin"
    datadir = Path(args.node_datadir)
    print("Loading chain manager... ", end='', flush=True)
    # TODO: allow specifying the chaint type (unfortunately, the UTXO db doesn't contain that as metadata yet :/)
    #chainman = pbk.load_chainman(datadir, pbk.ChainType.MAINNET)
    chainman = pbk.load_chainman(datadir, pbk.ChainType.SIGNET)
    print("done.")

    # TODO: read blocks here
    tip = chainman.get_block_index_from_tip()
    print(f"Current block tip: {tip.block_hash.hex} at height {tip.height}")

    con.close()


if __name__ == "__main__":
    main()
